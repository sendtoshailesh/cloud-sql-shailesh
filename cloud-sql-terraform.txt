https://cloud.google.com/docs/terraform/resource-management/export

https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#example-usage

export one or more resource selectively:
https://cloud.google.com/docs/terraform/resource-management/export#filter_the_output



gcloud beta resource-config list-resource-types
gcloud beta resource-config list-resource-types >> strings.txt

gcloud beta resource-config bulk-export \
  --resource-types=ComputeInstance \
  --project=PROJECT_ID \
  --resource-format=terraform
  
gcloud beta resource-config bulk-export \
  --resource-types=SQLInstance \
  --project=shailesh-1 \
  --resource-format=terraform
  
  
gcloud beta resource-config bulk-export \
  --path=entire-tf-output \
  --project=shailesh-1 \
  --resource-format=terraform
  



admin_shkm_altostrat_com@instance-mumbai:~/terraform$ vi main.tf
admin_shkm_altostrat_com@instance-mumbai:~/terraform$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_sql_database_instance.pg_db1 will be created
  + resource "google_sql_database_instance" "pg_db1" {
      + connection_name               = (known after apply)
      + database_version              = "POSTGRES_10"
      + first_ip_address              = (known after apply)
      + id                            = (known after apply)
      + ip_address                    = (known after apply)
      + master_instance_name          = (known after apply)
      + name                          = "pg-db11"
      + private_ip_address            = (known after apply)
      + project                       = "shailesh-1"
      + public_ip_address             = (known after apply)
      + region                        = "asia-south1"
      + self_link                     = (known after apply)
      + server_ca_cert                = (known after apply)
      + service_account_email_address = (known after apply)

      + replica_configuration {
          + ca_certificate            = (known after apply)
          + client_certificate        = (known after apply)
          + client_key                = (known after apply)
          + connect_retry_interval    = (known after apply)
          + dump_file_path            = (known after apply)
          + failover_target           = (known after apply)
          + master_heartbeat_period   = (known after apply)
          + password                  = (sensitive value)
          + ssl_cipher                = (known after apply)
          + username                  = (known after apply)
          + verify_server_certificate = (known after apply)
        }

      + settings {
          + activation_policy      = "ALWAYS"
          + availability_type      = "REGIONAL"
          + crash_safe_replication = (known after apply)
          + disk_autoresize        = true
          + disk_size              = 15
          + disk_type              = "PD_SSD"
          + pricing_plan           = "PER_USE"
          + replication_type       = "SYNCHRONOUS"
          + tier                   = "db-custom-8-32768"
          + version                = (known after apply)

          + backup_configuration {
              + binary_log_enabled = (known after apply)
              + enabled            = (known after apply)
              + location           = (known after apply)
              + start_time         = (known after apply)
            }

          + database_flags {
              + name  = "cloudsql.logical_decoding"
              + value = "on"
            }
          + database_flags {
              + name  = "cloudsql.enable_pglogical"
              + value = "on"
            }
          + database_flags {
              + name  = "cloudsql.iam_authentication"
              + value = "on"
            }

          + ip_configuration {
              + ipv4_enabled    = true
              + private_network = "projects/shailesh-1/global/networks/sh-vpc"
            }

          + location_preference {
              + zone = "asia-south1-a"
            }

          + maintenance_window {
              + day  = 1
              + hour = 1
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_sql_database_instance.pg_db1: Creating...
google_sql_database_instance.pg_db1: Still creating... [10s elapsed]
google_sql_database_instance.pg_db1: Still creating... [20s elapsed]
google_sql_database_instance.pg_db1: Still creating... [30s elapsed]
google_sql_database_instance.pg_db1: Still creating... [40s elapsed]
google_sql_database_instance.pg_db1: Still creating... [50s elapsed]
google_sql_database_instance.pg_db1: Still creating... [1m0s elapsed]
google_sql_database_instance.pg_db1: Still creating... [1m10s elapsed]
google_sql_database_instance.pg_db1: Still creating... [1m20s elapsed]
google_sql_database_instance.pg_db1: Still creating... [1m30s elapsed]
google_sql_database_instance.pg_db1: Still creating... [1m40s elapsed]
google_sql_database_instance.pg_db1: Still creating... [1m50s elapsed]
google_sql_database_instance.pg_db1: Still creating... [2m0s elapsed]
google_sql_database_instance.pg_db1: Still creating... [2m10s elapsed]
google_sql_database_instance.pg_db1: Still creating... [2m20s elapsed]
google_sql_database_instance.pg_db1: Still creating... [2m30s elapsed]
google_sql_database_instance.pg_db1: Still creating... [2m40s elapsed]
google_sql_database_instance.pg_db1: Still creating... [2m50s elapsed]
google_sql_database_instance.pg_db1: Still creating... [3m0s elapsed]
google_sql_database_instance.pg_db1: Still creating... [3m10s elapsed]
google_sql_database_instance.pg_db1: Still creating... [3m20s elapsed]
google_sql_database_instance.pg_db1: Still creating... [3m30s elapsed]
google_sql_database_instance.pg_db1: Still creating... [3m40s elapsed]
google_sql_database_instance.pg_db1: Still creating... [3m50s elapsed]
google_sql_database_instance.pg_db1: Still creating... [4m0s elapsed]
google_sql_database_instance.pg_db1: Still creating... [4m10s elapsed]
google_sql_database_instance.pg_db1: Still creating... [4m20s elapsed]
google_sql_database_instance.pg_db1: Still creating... [4m30s elapsed]
google_sql_database_instance.pg_db1: Still creating... [4m40s elapsed]
google_sql_database_instance.pg_db1: Still creating... [4m50s elapsed]
google_sql_database_instance.pg_db1: Still creating... [5m0s elapsed]
google_sql_database_instance.pg_db1: Creation complete after 5m1s [id=pg-db11]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
admin_shkm_altostrat_com@instance-mumbai:~/terraform$ cat main.tf
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.5.0"
    }
  }
}

provider "google" {
  credentials = file("key.json")

  project = "shailesh-1"
  region  = "us-central1"
  zone    = "us-central1-c"
}


resource "google_sql_database_instance" "pg_db1" {
  database_version = "POSTGRES_10"
  name             = "pg-db11"
  project          = "shailesh-1"
  region           = "asia-south1"
  settings {
    activation_policy = "ALWAYS"
    availability_type = "REGIONAL"
    database_flags {
      name  = "cloudsql.logical_decoding"
      value = "on"
    }
    database_flags {
      name  = "cloudsql.enable_pglogical"
      value = "on"
    }
    database_flags {
      name  = "cloudsql.iam_authentication"
      value = "on"
    }
    disk_autoresize       = true
    disk_size             = 15
    disk_type             = "PD_SSD"
    ip_configuration {
      ipv4_enabled    = true
      private_network = "projects/shailesh-1/global/networks/sh-vpc"
    }
    location_preference {
      zone = "asia-south1-a"
    }
    maintenance_window {
      day  = 1
      hour = 1
    }
    pricing_plan = "PER_USE"
    tier         = "db-custom-8-32768"
  }
}
admin_shkm_altostrat_com@instance-mumbai:~/terraform$




admin_shkm_altostrat_com@instance-mumbai:~/terraform$ cat main.tf.old
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.5.0"
    }
  }
}

provider "google" {
  credentials = file("key.json")

  project = "shailesh-1"
  region  = "us-central1"
  zone    = "us-central1-c"
}

resource "google_sql_database_instance" "main" {
  name             = "pg-db1"
  database_version = "POSTGRES_10"
  region           = "asia-south1"
settings {
    # Second-generation instance tiers are based on the machine
    # type. See argument reference below.
    tier = "db-custom-8-32768"
    activation_policy = "ALWAYS"
   database_flags {
               name  = "cloudsql.logical_decoding"
               value = "on"
            }
           database_flags {
               name  = "cloudsql.enable_pglogical"
               value = "on"
            }
           database_flags {
               name  = "cloudsql.iam_authentication"
               value = "on"
            }

           maintenance_window {
              day  = 1
              hour = 1
            }
  }
}

admin_shkm_altostrat_com@instance-mumbai:~/terraform$


